name: Automated Workflow | Tech Challenge - FIAP

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: ubuntu-latest

    env:
      Solution_Name: KitchenService.sln
      ProjectTest_Name:  KitchenService.Tests/KitchenService.Tests.csproj
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Remove existing NuGet source
        run: dotnet nuget remove source github || echo "Source not found, skipping removal"
      
      - name: Configure NuGet credentials
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/caiofabiogomes/index.json" \
            --name github \
            --username ffvieira \
            --password ${{ secrets.SECRET_NUGET_PACKAGES }} \
            --store-password-in-clear-text


      - name: Restore and Build
        run: |
          dotnet restore ${{ env.Solution_Name }}
          dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --no-restore

      - name: Execute  tests
        run: dotnet test ${{ env.ProjectTest_Name }} --configuration ${{ matrix.configuration }}

      - name: Login to Docker Hub
        if: matrix.configuration == 'Release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image (Only Release)
        if: matrix.configuration == 'Release'
        run: |
          docker build --build-arg ARG_SECRET_NUGET_PACKAGES=${{ secrets.SECRET_NUGET_PACKAGES }} -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest
